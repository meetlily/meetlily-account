generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Applications {
  id           String         @id @default(uuid()) @map("_id") @db.VarChar(36)
  name         String
  description  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  enabled      Boolean?       @default(false)
  global       Boolean?       @default(true)
  private      Boolean?       @default(false)
  icon_name    String?
  icon         String?
  slug         String         @unique
  externalLink String?
  Organization Organization[] @relation("ApplicationsToOrganization")
  User         User[]         @relation("ApplicationsToUser")
}

model Module {
  id            String          @id @default(uuid()) @map("_id") @db.VarChar(36)
  name          String
  slug          String
  description   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  enabled       Boolean?        @default(false)
  externalLink  String?
  logo          String?
  icon          String?
  Formdata      Formdata[]
  Formfield     Formfield[]
  Category      Category[]      @relation("CategoryToModule")
  Configuration Configuration[] @relation("ConfigurationToModule")
  Organization  Organization[]  @relation("ModuleToOrganization")
  Subscription  Subscription[]  @relation("ModuleToSubscription")
  User          User[]          @relation("ModuleToUser")
}

model Category {
  id           String         @id @default(uuid()) @map("_id") @db.VarChar(36)
  name         String
  slug         String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  icon         String?
  description  String?
  createId     String?
  Module       Module[]       @relation("CategoryToModule")
  Organization Organization[] @relation("CategoryToOrganization")
}

model Newsletter {
  id        String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id        String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  title     String
  body      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Page {
  id             String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  title          String
  content        String
  slug           String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  type           String
  global         Boolean? @default(true)
  organizationId String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id             String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  title          String
  slug           String   @unique
  content        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  viewCount      Int
  userId         String
  global         Boolean? @default(true)
  organizationId String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Configuration {
  id             String        @id @default(uuid()) @map("_id") @db.VarChar(36)
  name           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  data           Json?
  global         Boolean?      @default(true)
  organizationId String?
  Organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  Module         Module[]      @relation("ConfigurationToModule")
  User           User[]
}

model Variable {
  id        String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  name      String
  code      Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  global    Boolean? @default(true)
  type      String?
  message   String?
  createdId String?
}

model Tags {
  id             String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  name           String
  slug           String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String?
}

model Organization {
  id            String          @id @default(uuid()) @map("_id") @db.VarChar(36)
  name          String
  slug          String?         @unique
  logo          String?
  industry      String?
  description   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
  Configuration Configuration[]
  Formdata      Formdata[]
  Formfield     Formfield[]
  Applications  Applications[]  @relation("ApplicationsToOrganization")
  Category      Category[]      @relation("CategoryToOrganization")
  Module        Module[]        @relation("ModuleToOrganization")
  Notification  Notification[]  @relation("NotificationToOrganization")
  Role          Role[]          @relation("OrganizationToRole")
  User          User[]          @relation("OrganizationToUser")
}

model Default {
  id        String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
  data      Json?
}

model User {
  id             String          @id @default(uuid()) @map("_id") @db.VarChar(36)
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  image          String?
  avatar         String?
  hashedPassword String?
  country        Json?
  Accounts       Account[]
  Note           Note[]
  Page           Page[]
  Post           Post[]
  Applications   Applications[]  @relation("ApplicationsToUser")
  Device         Device[]        @relation("DeviceToUser")
  Formdata       Formdata[]      @relation("FormdataToUser")
  Formfield      Formfield[]     @relation("FormfieldToUser")
  Module         Module[]        @relation("ModuleToUser")
  Notification   Notification[]  @relation("NotificationToUser")
  Organization   Organization[]  @relation("OrganizationToUser")
  Role           Role[]          @relation("RoleToUser")
  Subscription   Subscription[]  @relation("SubscriptionToUser")
  Configuration  Configuration[]
  Default        Default?        @relation(fields: [defaultId], references: [id])
  defaultId      String?         @db.VarChar(36)
}

model Role {
  id           String         @id @default(uuid()) @map("_id") @db.VarChar(36)
  name         String         @unique
  description  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Organization Organization[] @relation("OrganizationToRole")
  User         User[]         @relation("RoleToUser")
}

model Notification {
  id           String         @id @default(uuid()) @map("_id") @db.VarChar(36)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  json         Json?
  status       String?
  type         String
  Organization Organization[] @relation("NotificationToOrganization")
  User         User[]         @relation("NotificationToUser")
}

model Device {
  id        String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  json      Json?
  user      User[]   @relation("DeviceToUser")
}

model Account {
  id                String  @id @default(uuid()) @map("_id") @db.VarChar(36)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Logs {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  log       String?
  type      String?
  json      Json?    @db.Json
}

model Template {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  jsx       String?
  name      String?
  type      String?
  slug      String?
}

model Icon {
  id        String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  type      String?
  icon      String?
  slug      String?
}

model Resume {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String
  education  String
  experience String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Subscription {
  id        String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Module    Module[] @relation("ModuleToSubscription")
  User      User[]   @relation("SubscriptionToUser")
}

model Formfield {
  id             String        @id @default(uuid()) @map("_id") @db.VarChar(36)
  name           String
  label          String
  fields         Json?
  moduleId       String?       @db.VarChar(36)
  organizationId String?       @db.VarChar(36)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  default        Boolean?
  Formdata       Formdata[]
  Module         Module?       @relation(fields: [moduleId], references: [id])
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  User           User[]        @relation("FormfieldToUser")
}

model Formdata {
  id             String        @id @default(uuid()) @map("_id") @db.VarChar(36)
  data           Json?
  formfieldId    String?       @db.VarChar(36)
  moduleId       String?       @db.VarChar(36)
  organizationId String?       @db.VarChar(36)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Formfield      Formfield?    @relation(fields: [formfieldId], references: [id])
  Module         Module?       @relation(fields: [moduleId], references: [id])
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  User           User[]        @relation("FormdataToUser")
}
