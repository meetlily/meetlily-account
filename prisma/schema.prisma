generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Applications {
  id           String         @id @default(uuid()) @map("_id") @db.VarChar(36)
  name         String
  description  String?
  createdAt    DateTime       @default(now())
  enabled      Boolean?       @default(false)
  global       Boolean?       @default(true)
  private      Boolean?       @default(false)
  icon_name    String?
  icon         String?
  slug         String         @unique
  externalLink String?
  User         User[]
  Organization Organization[]
}

model Module {
  id           String         @id @default(uuid()) @map("_id") @db.VarChar(36)
  name         String
  slug         String
  createdAt    DateTime       @default(now())
  enabled      Boolean?       @default(false)
  installed    Boolean?       @default(false)
  global       Boolean?       @default(true)
  private      Boolean?       @default(false)
  icon_name    String?
  externalLink String?
  User         User[]
  Organization Organization[]
  Subscription Subscription[]
}

model Newsletter {
  id        String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  email     String   @unique
  createdAt DateTime @default(now())
}

model Contact {
  id        String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
}

model Category {
  id           String         @id @default(uuid()) @map("_id") @db.VarChar(36)
  name         String
  slug         String         @unique
  createdAt    DateTime       @default(now())
  icon         String?
  description  String?
  createId     String?
  Organization Organization[]
}

model Note {
  id        String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  title     String
  body      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Page {
  id             String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  title          String
  content        String
  slug           String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  type           String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  global         Boolean? @default(true)
  organizationId String?
}

model Post {
  id             String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  title          String
  slug           String   @unique
  content        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  viewCount      Int
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  global         Boolean? @default(true)
  organizationId String?
}

model Configuration {
  id             String       @id @default(uuid()) @map("_id") @db.VarChar(36)
  name           String
  createdAt      DateTime     @default(now())
  data           Json?
  global         Boolean?     @default(true)
  createdId      String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Variable {
  id        String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  name      String
  code      Int      @unique
  createdAt DateTime @default(now())
  global    Boolean? @default(true)
  type      String?
  message   String?
  createdId String?
}

model Tags {
  id             String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  name           String
  slug           String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String?
}

model Organization {
  id            String          @id @default(uuid()) @map("_id") @db.VarChar(36)
  name          String
  slug          String?         @unique
  description   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
  Module        Module[]
  Configuration Configuration[]
  Category      Category[]
  Role          Role[]
  User          User[]
  Notification  Notification[]
  Applications  Applications[]
}

model User {
  id             String         @id @default(uuid()) @map("_id") @db.VarChar(36)
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  image          String?
  avatar         String?
  hashedPassword String?
  favoriteIds    String[]
  Note           Note[]
  Page           Page[]
  Post           Post[]
  Accounts       Account[]
  Organization   Organization[]
  Module         Module[]
  Role           Role[]
  Notification   Notification[]
  Device         Device[]
  Applications   Applications[]
  Subscription   Subscription[]
}

model Role {
  id           String         @id @default(uuid()) @map("_id") @db.VarChar(36)
  name         String         @unique
  description  String?
  Organization Organization[]
  User         User[]
}

model Default {
  id        String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  createdAt DateTime @default(now())
  json      Json?
  type      String
}

model Notification {
  id           String         @id @default(uuid()) @map("_id") @db.VarChar(36)
  createdAt    DateTime       @default(now())
  json         Json?
  status       String?
  type         String
  User         User[]
  Organization Organization[]
}

model Device {
  id        String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  createdAt DateTime @default(now())
  json      Json?
  user      User[]
}

model Account {
  id                String  @id @default(uuid()) @map("_id") @db.VarChar(36)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Logs {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(36)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  log        String?
  type       String?
  json       Json?    @db.Json
}

model Template {
  created_at DateTime @default(now()) @db.Timestamptz(6)
  id         String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  jsx        String?
  name       String?
  type       String?
  slug       String?
}

model Icon {
  id         String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  name       String?
  type       String?
  icon       String?
  slug       String?
}

model Resume {
  id         Int    @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String
  education  String
  experience String
}

model Subscription {
  id     String   @id @default(uuid()) @map("_id") @db.VarChar(36)
  Module Module[]
  User   User[]
}
